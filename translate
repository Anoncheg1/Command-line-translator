#!/bin/bash
# This tool for access translate.google.com from terminal and to have English dictionary.
# mirror https://github.com/Anoncheg1/Command-line-translator
# mirror http://pastebin.com/kPTYjY6W
# requirements: curl, Mozilla js shell, forvo.com account
# + output: translated text, fixed text with highlight, dictionary, phrases, ideom, transcription, audio pronunciation
# + cache for all words
# + saving words to file for learning

help='translate [-s] <text>
if text is english, target language is ENGLISH_TARGET_LANG
otherwise, "target" language is english
-s, --sound Enable sound for one word'

# adjust to taste
ENGLISH_TARGET_LANG=ru		#target language for english request
target=en 			#target for all languages except english
flogin=121212 			#forvo.com login and pass REQUIRED!
fpass=121212
words_buffer=4000	#4000 files max. there is removeing all files older than 20 days.
#httpproxy="127.0.0.1:4444"		#proxy for long string
#httpsproxy="--socks5 127.0.0.1:9050"	#socks5
timeout=6
PR_DIR="/home/$USER/.translate"
useragent="Mozilla/5.0 (X11; Linux i686) AppleWebKit/534.34 (KHTML, like Gecko) QupZilla/1.3.1 Safari/534.34"
#
trap bashtrap INT
bashtrap()
{
	echo "CTRL+C Detected"
	rm "$cachefile" 2> /dev/null
	exit
}

jsout_dictionary="var googlearr = eval(JSON.stringify(myJSONObject));
var rsum=\"\"; //translated text
if(typeof googlearr[0] !== 'undefined' && googlearr[0] !== null){  //summing sentences
	for (var i = 0; i < googlearr[0].length; i++){
		if(typeof googlearr[0][i][0] !== 'undefined' && googlearr[0][i][0] !== null){
			rsum=rsum+googlearr[0][i][0];
		}
	}
}
print(\"\033[1;32m\"+rsum+\"\033[0m\");
function dictionary(arr){ //dictionary output
	if(typeof arr[1] !== 'undefined' && arr[1] !== null){
		for (var a = 0; a < arr[1].length; a++){
			if(typeof arr[1][a][0] !== 'undefined' && arr[1][a][0] !== null){
				print(\"\033[1;34m\"+arr[1][a][0]+\"\033[0m\");//part of speach
				for (var b = 0; b < arr[1][a][2].length; b++){//words
					num=parseFloat(arr[1][a][2][b][3]); //frequency
					whitespace=' ' //for x.1 and xxx format
					num2=Math.round(num*10000)/10;
					if (num2 == 0){
						whitespace='   '; //for 0 format
					}
					if (num2 > 10){
						num=Math.round(num2/10)*10;
						num2=num;
						if (num < 10){
							whitespace='  '; //for x format
						}else if (num < 100){
							whitespace='  '; //for xx format
						}
					}
					print(num2+whitespace+arr[1][a][2][b][0]+' '+arr[1][a][2][b][1]);//frequency+ word + variant of speach
				}
			}
		}
	}
}"
comment="arr=googlearr;
for (var c = 0; c < arr.length; c++){ //testing
	if(typeof arr[c] !== 'undefined' && arr[c] !== null){ //dictionary output
		for (var i = 0; i < arr[c].length; i++){
			if(typeof arr[c][i] !== 'undefined' && arr[c][i] !== null){
				for (var e = 0; e < arr[c][i].length; e++){
					print(i);
					print(arr[c][i][e]);
				}
			}
		}
	}
}"


request=($*) #get array
sound=0
volume=0.7
if [[ $1 = -h || $1 = --help ]]; then #help
	echo "$help"
	exit
fi
if [[ $1 == -s || $1 == -s2 || $1 == -s3 || $1 == --sound ]];then #sound varibles
	sound=1
	[[ $1 == -s2 ]] && volume=1.5
	[[ $1 == -s3 ]] && volume=2.5
	request[0]="" #remove first parameter
fi
request=${request[*]} #to string
[[ ${#request} -eq 0 ]] && exit

source=auto
tchar=${request:0:1} #language detection by first character
tcharnum=$(printf "%d" "'${tchar}")
if [[ $tcharnum -ge 65 && $tcharnum -le 122 ]]; then #if request is A-Za-z then it is english...
	source=en #english
	target="$ENGLISH_TARGET_LANG" #if text is english, target language is ENGLISH_TARGET_LANG
fi

[ ! -d "$PR_DIR" ] && mkdir "$PR_DIR"
[ ! -d "$PR_DIR"/cache ] && mkdir "$PR_DIR"/cache

if [[ ${#request} -gt 300 ]]; then
	if ! result=$(curl -s -i --user-agent "$useragent" $httpsproxy -x "$httpproxy" -d "sl=$source" -d "tl=$target" --data-urlencode "text=$request" http://translate.google.com) && [[ $httpproxy != "" ]] #getting google respond for short sentence
	then	# second attempt without https proxy
		httpsproxy=""
		result=$(curl -s -i --user-agent "$useragent" $httpsproxy -x "$httpproxy" -d "sl=$source" -d "tl=$target" --data-urlencode "text=$request" http://translate.google.com)
	fi
	encoding=$(awk '/Content-Type: .* charset=/ {sub(/^.*charset=["'\'']?/,""); sub(/[ "'\''].*$/,""); print}' <<<"$result")
	#iconv -f $encoding <<<"$result" | awk 'BEGIN {RS="<div"};/<span[^>]* id=["'\'']?result_box["'\'']?/ {sub(/^.*id=["'\'']?result_box["'\'']?(>| [^>]*>)([ \n\t]*<[^>]*>)*/,"");sub(/<.*$/,"");print}' | html2text -utf8
	echo -e "\033[32;1m"$(iconv -f $encoding <<<"$result" |  awk 'BEGIN {RS="</div>"};/<span[^>]* id=["'\'']?result_box["'\'']?/' | html2text -utf8)"\033[0m"

else
	cachefile="$PR_DIR/cache/$request"
	r_words_count=$(echo "$request"  |wc -w)
	if [[ ! -e "$cachefile" || (( $sound == 1 && ! -e "$cachefile".mp3 )) ]]; then

		[[ $r_words_count -le 4 ]] && { httpproxy="" ; httpsproxy="" ; } #don't wanna proxy for 4 words.

		if ! grespond=$(curl -s -i --user-agent "$useragent" $httpsproxy -x "$httpproxy" -m $timeout --data-urlencode "text=$request" "http://translate.google.com/translate_a/t?client=t&hl=$target&sl=$source&tl=$target&ie=UTF-8&oe=UTF-8&multires=1&ssel=0&tsel=0&sc=1") && [[ "$httpproxy" != "" ]] #getting google respond for short sentence
		then	# second attempt without https proxy
			#echo https proxy not working. using http proxy.
			httpsproxy=""
			grespond=$(curl -s -i --user-agent "$useragent" $httpsproxy -x "$httpproxy" -m $timeout --data-urlencode "text=$request" "http://translate.google.com/translate_a/t?client=t&hl=$target&sl=$source&tl=$target&ie=UTF-8&oe=UTF-8&multires=1&ssel=0&tsel=0&sc=1") #getting google respond for short sentence
		fi
		[[ ! $(echo $grespond | grep -o '\[.*\]') ]] && { echo "can't connect" ; exit; } #small connection check

		#echo -n "var myJSONObject = " > "$PR_DIR"/tmpjsobj2
		#echo [$(echo "$grespond" | grep -o '"[^"]*/i[^"]*"')"];" >> "$PR_DIR"/tmpjsobj2
		#echo [$(echo "$grespond" | grep -o '[^"]*/i[^"]*')"];"
		#echo -e "var googlearr = eval(JSON.stringify(myJSONObject));\n print(googlearr);" >> "$PR_DIR"/tmpjsobj2
		#js "$PR_DIR"/tmpjsobj2
		if [[ $r_words_count -le 2 ]];then #getting google fixed text from $grespond
			fl=$(echo "$grespond" | grep -o '[^"]*/i[^"]*' | sed 's/\\u003cb\\u003e\\u003ci\\u003e//g' | sed 's/\\u003c\/i\\u003e\\u003c\/b\\u003e//g' | sed 's/\\u0026//g' | sed "s/\#39;/'/g")
			diffnum=$(cmp -l <(echo -n $request) <(echo -n $fl) 2>/dev/null | head -n 1 | sed 's/\([0-9][0-9]\?\).*/\1/') 
#			echo $diffnum
			if [[ $diffnum > 0 ]];then
				[[ $source != en ]]&& diffnum=$(($diffnum/2+$diffnum%2))   #MUST BE CHECKED FOR REQUIRED LANGUAGES
				fl="$(tput bold)$(tput setaf 3)${fl:0:$diffnum-1}$(tput bold)$(tput setaf 1)${fl:$diffnum-1:1}$(tput bold)$(tput setaf 3)${fl:$diffnum}$(tput sgr0)" #highlight difference in one word
			fi
		else
			fl=$(echo "$grespond" | grep -o '[^"]*/i[^"]*' | sed 's/\\u003cb\\u003e\\u003ci\\u003e/'$(tput bold)$(tput setaf 3)'/g' | sed 's/\\u003c\/i\\u003e\\u003c\/b\\u003e/'$(tput sgr0)'/g' | sed 's/\\u0026//g' | sed "s/\#39;/'/g" ) #google fixed text
		fi
#		echo $grespond | grep -o '\[.*\]' 

		echo -n "var myJSONObject = " > "$PR_DIR"/tmpjsobj
		echo -n "$grespond" | grep -o '\[.*\]' >> "$PR_DIR"/tmpjsobj
		echo ";">> "$PR_DIR"/tmpjsobj
		echo -n "$jsout_dictionary" >> "$PR_DIR"/tmpjsobj
		[[ ! $fl ]] &&  echo -n "dictionary(googlearr);" >> "$PR_DIR"/tmpjsobj
	
		#for english only. but it may be altered
		if [[ $r_words_count -eq 1 && ${#request} -gt 1 && $source == en && ! $fl && $(echo "$request" | tr '[:upper:]' '[:lower:]') !=  $(echo "$res" | tr '[:upper:]' '[:lower:]') ]]; then #dictionary

			js "$PR_DIR"/tmpjsobj > "$cachefile" #google translated text and dictionary to cache

			#phrases
			raw_phras=$(curl -s --user-agent "$useragent" $httpsproxy -x "$httpproxy" -m $timeout http://www.macmillandictionary.com/dictionary/american/"$(echo $request | tr ' ' - )" | grep -o '<li ID.*End of DIV SENSE--></li>' | sed 's/<.\?span[^>]*>//g' )
			phras=$(echo $raw_phras |  sed 's/End of DIV SENSE--><\/li>/End of DIV SENSE--><\/li>\n/g' | grep -n -o '"h2">[^>]*<' | sed 's/^\([^:]*\):.*>\([^<]*\).*/\1 \2\./') #getting phrases
			phras2=$(echo $raw_phras |  sed 's/End of DIV SENSE--><\/li>/End of DIV SENSE--><\/li>\n/g' | grep -n -o '"EXAMPLE">[^>]*<' | sed 's/^\([^:]*\):.*>\([^<]*\).*/\1 \2/') #getting examples
			if [[ $phras ]]; then
				echo -e "\033[1;35m"PHRASES:$(tput sgr0) >> "$cachefile"
				join --nocheck-order -a 1 -a 2 <(echo "$phras") <(echo "$phras2")  | sed '/^$/d' >> "$cachefile"
#				echo "$phras" > tm1
#				echo "$phras2" >tm2
#				echo -e "\033[34m"http://www.macmillandictionary.com/dictionary/american/"$request"$(tput sgr0) >> "$cachefile"
			fi

			trans=$(curl -s --user-agent "$useragent" $httpsproxy -x "$httpproxy" http://lingvopro.abbyyonline.com/en/Translate/en-ru/"$request" | grep -o '"[^"]*Handlers/TranscriptionHandler\.ashx[^"]*"' | sed 's/.*=\(.*\)"/\1/'| echo -n -e $(sed 's/+/ /g; s/%/\\x/g')) #getting transcription
			[[ $trans ]] && echo "[$trans]" >> "$cachefile"

			cat "$cachefile" 2>/dev/null #output
			echo -e "\033[34m"http://oxforddictionaries.com/definition/english/"$request"$(tput sgr0) # just another good english dictionary

			if [[ $trans ]] ; then

				#saving words
				if [[ ${#request} -gt 2 && ! $(grep "$request" "$PR_DIR"/translated_words 2>/dev/null) ]]; then
					#echo -e "$request \t\t\t\t\t\t\t\t\t\t [$trans]" >> "$PR_DIR"/translated_words
					echo -e "$request" >> "$PR_DIR"/translated_words
				fi

				#getting sound from forvo.com
				if [[ $sound == 1 && ! -e "$cachefile".mp3 ]]; then
					curl -s -c "$PR_DIR"/tmpcookie --connect-timeout $timeout -m $timeout --user-agent "$useragent" $httpsproxy -x "$httpproxy" -d "login=$flogin&password=$fpass" http://ru.forvo.com/login/ -o/dev/null
					if [[ -e "$PR_DIR"/tmpcookie ]]; then
						slink=$(curl -s -b $PR_DIR/tmpcookie --connect-timeout $timeout -m $timeout --user-agent "$useragent" $httpsproxy -x "$httpproxy" http://ru.forvo.com/word/"$request"/ | grep -o '[^"]*/download/mp3/'"$request"'/en/[^"]*' |head -n 1 )
						[[ $slink ]] && curl -s -b "$PR_DIR"/tmpcookie --connect-timeout $timeout -m $timeout --user-agent "$useragent" $httpsproxy -x "$httpproxy" http://ru.forvo.com"$slink" > "$cachefile".mp3
						rm "$PR_DIR"/tmpcookie 2>/dev/null
					else
						echo fail to get sound from forvo.com
					fi
				fi
			fi
			[[ $(ls "$PR_DIR"/cache | wc -l) -gt $words_buffer ]] && find "$PR_DIR"/cache -mtime +20 -delete #cache cleaning. remove words older than 20 days.
		else
			js "$PR_DIR"/tmpjsobj #google dictionary and translated text output
			[[ $fl ]] && echo $fl #google fixed text output

			if [[ $source == en && ! $fl && $(echo "$request" | tr '[:upper:]' '[:lower:]') !=  $(echo "$res" | tr '[:upper:]' '[:lower:]') ]]; then 
				#phrases for 2 words
				if [[ $r_words_count -le 2 ]]; then
					raw_phras=$(curl -s --user-agent "$useragent" $httpsproxy -x "$httpproxy" http://www.macmillandictionary.com/dictionary/american/"$(echo $request | tr ' ' - )" | grep -o '<li.*End of DIV SENSE--></li>' | sed 's/<.\?span[^>]*>//g' )
					phras=$(echo $raw_phras |  sed 's/End of DIV SENSE--><\/li>/End of DIV SENSE--><\/li>\n/g' | grep -n -o '"h2">[^>]*<' | sed 's/^\([^:]*\):.*>\([^<]*\).*/\1 \2\./') #getting phrases
					phras2=$(echo $raw_phras |  sed 's/End of DIV SENSE--><\/li>/End of DIV SENSE--><\/li>\n/g' | grep -n -o '"EXAMPLE">[^>]*<' | sed 's/^\([^:]*\):.*>\([^<]*\).*/\1 \2/') #getting examples
					if [[ $phras2 ]]; then
						echo -e "\033[1;35m"PHRASES:$(tput sgr0)
						join --nocheck-order -a 1 -a 2 <(echo "$phras") <(echo "$phras2") | sed '/^$/d'
					fi
				fi
				#search for ideom for 2-4 words
				if [[ ! $phras2 && $r_words_count -le 4 ]]; then
					raw_ideoms=$(curl -s --user-agent "$useragent" $httpsproxy -x "$httpproxy" http://idioms.thefreedictionary.com/"$(echo $request | tr ' ' + )" | grep -o 'div class="ds-single".*</div><div')
					ideom=$(echo $raw_ideoms | sed 's/<i>//' | sed 's/<\/i>//' | sed 's/.*ds-single\">\([^<]*\)<.*/\1/')
					illustration=$(echo $raw_ideoms | sed 's/.*class=illustration>\([^<]*\)<.*/\1/')
					if [[ $ideom ]]; then
						echo -e "\033[1;35m"Ideom:$(tput sgr0)
						echo $ideom
						echo $illustration
					fi
				fi
			fi

		fi #english dictionary
	else #cache output
		cat "$cachefile" #output
		echo -e "\033[34m"http://oxforddictionaries.com/definition/english/"$request"$(tput sgr0)
	fi
	#sound output
	if [[ $sound == 1 && -e "$cachefile".mp3 ]]; then 
		stat=$(playsound --loop 0 --volume "$volume" "$cachefile".mp3 2>&1 | grep -o 'Couldn')
		[[ $stat ]] && rm "$cachefile".mp3
	fi
fi

exit
